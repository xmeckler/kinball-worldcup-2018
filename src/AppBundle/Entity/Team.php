<?php

namespace AppBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Validator\Constraints as Assert;

/**
 * Team
 *
 * @ORM\Table(name="team")
 * @ORM\Entity(repositoryClass="AppBundle\Repository\TeamRepository")
 */
class Team
{
    /*
    * Adding personal methods / variables
    */

    /**
     * @ORM\OneToMany(targetEntity="AppBundle\Entity\Player", mappedBy="team")
     */
    private $players;

    /**
     * Many Teams have Many Challenges.
     * @ORM\OneToMany(targetEntity="Challenge", mappedBy="greyTeam")
     */
    private $greyChallenges;

    /**
     * Many Teams have Many Challenges.
     * @ORM\OneToMany(targetEntity="Challenge", mappedBy="blueTeam")
     */
    private $blueChallenges;

    /**
     * Many Teams have Many Challenges.
     * @ORM\OneToMany(targetEntity="Challenge", mappedBy="blackTeam")
     */
    private $blackChallenges;

    /**
     * Many Teams have Many Challenges.
     * @ORM\OneToMany(targetEntity="Challenge", mappedBy="winnerTeam")
     */
    private $challengeWinners;

    public function __toString()
    {
        // Return the Team object with *[TEAMNAME]  [FLAGIMG]* format, when __toString is called
        return $this->teamName . "  " . $this->flagImg;
    }

    /*
     * Autogenerated methods /variables
     */

    /**
     * @var int
     *
     * @ORM\Column(name="id", type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    private $id;

    /**
     * @var string
     *
     * @ORM\Column(name="country", type="string", length=80)
     */
    private $country;

    /**
     * @var string
     *
     * @ORM\Column(name="teamName", type="string", length=80)
     */
    private $teamName;

    /**
     * @var string
     *
     * @ORM\Column(name="flagImg", type="string", length=255)
     *
     * @Assert\NotBlank(message="Please, upload the flag image as a jpg or png file.")
     * @Assert\File(mimeTypes={ "image/jpeg", "image/png" })
     */
    private $flagImg;


    /**
     * Get id
     *
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set country
     *
     * @param string $country
     *
     * @return Team
     */
    public function setCountry($country)
    {
        $this->country = $country;

        return $this;
    }

    /**
     * Get country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->country;
    }

    /**
     * Set teamName
     *
     * @param string $teamName
     *
     * @return Team
     */
    public function setTeamName($teamName)
    {
        $this->teamName = $teamName;

        return $this;
    }

    /**
     * Get teamName
     *
     * @return string
     */
    public function getTeamName()
    {
        return $this->teamName;
    }

    /**
     * Set flagImg
     *
     * @param string $flagImg
     *
     * @return Team
     */
    public function setFlagImg($flagImg)
    {
        $this->flagImg = $flagImg;

        return $this;
    }

    /**
     * Get flagImg
     *
     * @return string
     */
    public function getFlagImg()
    {
        return $this->flagImg;
    }
    /**
     * Constructor
     */
    public function __construct()
    {
        $this->players = new \Doctrine\Common\Collections\ArrayCollection();
    }

    /**
     * Add player
     *
     * @param \AppBundle\Entity\Player $player
     *
     * @return Team
     */
    public function addPlayer(\AppBundle\Entity\Player $player)
    {
        $this->players[] = $player;

        return $this;
    }

    /**
     * Remove player
     *
     * @param \AppBundle\Entity\Player $player
     */
    public function removePlayer(\AppBundle\Entity\Player $player)
    {
        $this->players->removeElement($player);
    }

    /**
     * Get players
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getPlayers()
    {
        return $this->players;
    }

    /**
     * Add challenge
     *
     * @param \AppBundle\Entity\Challenge $challenge
     *
     * @return Team
     */
    public function addChallenge(\AppBundle\Entity\Challenge $challenge)
    {
        $this->challenges[] = $challenge;

        return $this;
    }

    /**
     * Remove challenge
     *
     * @param \AppBundle\Entity\Challenge $challenge
     */
    public function removeChallenge(\AppBundle\Entity\Challenge $challenge)
    {
        $this->challenges->removeElement($challenge);
    }

    /**
     * Get challenges
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getChallenges()
    {
        return $this->challenges;
    }

    /**
     * Add greyChallenge
     *
     * @param \AppBundle\Entity\Challenge $greyChallenge
     *
     * @return Team
     */
    public function addGreyChallenge(\AppBundle\Entity\Challenge $greyChallenge)
    {
        $this->greyChallenges[] = $greyChallenge;

        return $this;
    }

    /**
     * Remove greyChallenge
     *
     * @param \AppBundle\Entity\Challenge $greyChallenge
     */
    public function removeGreyChallenge(\AppBundle\Entity\Challenge $greyChallenge)
    {
        $this->greyChallenges->removeElement($greyChallenge);
    }

    /**
     * Get greyChallenges
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getGreyChallenges()
    {
        return $this->greyChallenges;
    }

    /**
     * Add blueChallenge
     *
     * @param \AppBundle\Entity\Challenge $blueChallenge
     *
     * @return Team
     */
    public function addBlueChallenge(\AppBundle\Entity\Challenge $blueChallenge)
    {
        $this->blueChallenges[] = $blueChallenge;

        return $this;
    }

    /**
     * Remove blueChallenge
     *
     * @param \AppBundle\Entity\Challenge $blueChallenge
     */
    public function removeBlueChallenge(\AppBundle\Entity\Challenge $blueChallenge)
    {
        $this->blueChallenges->removeElement($blueChallenge);
    }

    /**
     * Get blueChallenges
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getBlueChallenges()
    {
        return $this->blueChallenges;
    }

    /**
     * Add blackChallenge
     *
     * @param \AppBundle\Entity\Challenge $blackChallenge
     *
     * @return Team
     */
    public function addBlackChallenge(\AppBundle\Entity\Challenge $blackChallenge)
    {
        $this->blackChallenges[] = $blackChallenge;

        return $this;
    }

    /**
     * Remove blackChallenge
     *
     * @param \AppBundle\Entity\Challenge $blackChallenge
     */
    public function removeBlackChallenge(\AppBundle\Entity\Challenge $blackChallenge)
    {
        $this->blackChallenges->removeElement($blackChallenge);
    }

    /**
     * Get blackChallenges
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getBlackChallenges()
    {
        return $this->blackChallenges;
    }

    /**
     * Add challengeWinner
     *
     * @param \AppBundle\Entity\Challenge $challengeWinner
     *
     * @return Team
     */
    public function addChallengeWinner(\AppBundle\Entity\Challenge $challengeWinner)
    {
        $this->challengeWinners[] = $challengeWinner;

        return $this;
    }

    /**
     * Remove challengeWinner
     *
     * @param \AppBundle\Entity\Challenge $challengeWinner
     */
    public function removeChallengeWinner(\AppBundle\Entity\Challenge $challengeWinner)
    {
        $this->challengeWinners->removeElement($challengeWinner);
    }

    /**
     * Get challengeWinners
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getChallengeWinners()
    {
        return $this->challengeWinners;
    }
}
